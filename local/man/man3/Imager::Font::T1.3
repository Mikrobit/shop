.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "T1 3"
.TH T1 3 "2015-01-24" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\&  Imager::Font::Type1 \- low\-level functions for Type1 fonts
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Imager::Font creates a Imager::Font::Type1 object when asked to create
a font object based on a \f(CW\*(C`.pfb\*(C'\fR file.
.PP
See Imager::Font to see how to use this type.
.PP
This class provides low-level functions that require the caller to
perform data validation
.PP
By default Imager no longer creates the \fIt1lib.log\fR log file.  You
can re-enable that by calling \fIImager::init()\fR with the \f(CW\*(C`t1log\*(C'\fR option:
.PP
.Vb 1
\&  Imager::init(t1log=>1);
.Ve
.PP
This must be called before creating any fonts.
.PP
Currently specific to Imager::Font::Type1, you can use the following
flags when drawing text or calculating a bounding box:
.IP "\(bu" 4
\&\f(CW\*(C`underline\*(C'\fR \- Draw the text with an underline.
.IP "\(bu" 4
\&\f(CW\*(C`overline\*(C'\fR \- Draw the text with an overline.
.IP "\(bu" 4
\&\f(CW\*(C`strikethrough\*(C'\fR \- Draw the text with a strikethrough.
.PP
Obviously, if you're calculating the bounding box the size of the line
is included in the box, and the line isn't drawn :)
.SS "Anti-aliasing"
.IX Subsection "Anti-aliasing"
T1Lib supports multiple levels of anti-aliasing, by default, if you
request anti-aliased output, Imager::Font::T1 will use the maximum
level.
.PP
You can override this with the \fIset_t1_aa()\fR method:
.IP "\fIset_aa_level()\fR" 4
.IX Item "set_aa_level()"
Usage:
.Sp
.Vb 2
\&  $font\->set_aa_level(1);
\&  Imager::Font::T1\->set_aa_level(2);
.Ve
.Sp
Sets the T1Lib anti-aliasing level either for the specified font, or
for new font objects.
.Sp
The only parameter must be 1 or 2.
.Sp
Returns true on success.
.SH "AUTHOR"
.IX Header "AUTHOR"
Addi, Tony
